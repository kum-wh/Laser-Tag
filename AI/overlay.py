from pynq import Overlay
from pynq import allocate
import numpy as np

'''
if output_buffer[0] == 1:
    return "grenade"
elif output_buffer[0] == 2:
    return "shield"
elif output_buffer[0] == 3:
    return "reload"
elif output_buffer[0] == 4:
    return "none"
elif output_buffer[0] == 5:
    return "logout"   
'''

g_action = [[-63, -74, -6, 13, -5, -24],
        [-77, -96, -4, 21, -8, -35],
        [-84, -110, 3, 27, -11, -45],
        [-86, -113, 15, 36, -17, -55],
        [-80, -107, 15, 46, -27, -64],
        [-60, -88, 12, 54, -38, -73],
        [-29, -69, 5, 57, -47, -81],
        [6, -45, -1, 56, -53, -89],
        [40, -12, -5, 53, -57, -97],
        [72, 26, -7, 47, -56, -101],
        [100, 56, -12, 45, -54, -95],
        [114, 76, -17, 44, -50, -83],
        [119, 82, -19, 43, -42, -67],
        [113, 78, -15, 43, -32, -51],
        [107, 66, -6, 42, -20, -35],
        [97, 51, 2, 42, -8, -20],
        [85, 39, 10, 43, 4, -6],
        [72, 24, 22, 43, 16, 6],
        [52, 15, 43, 37, 28, 19],
        [36, -1, 61, 31, 38, 31],
        [22, -19, 61, 27, 44, 39],
        [7, -30, 69, 24, 53, 46],
        [-5, -38, 68, 21, 60, 51],
        [-18, -36, 70, 15, 67, 56],
        [-30, -41, 67, 14, 71, 61],
        [-40, -34, 64, 14, 75, 68],
        [-56, -37, 61, 10, 79, 73],
        [-65, -44, 60, 8, 81, 77],
        [-68, -44, 57, 2, 83, 75],
        [-68, -45, 56, -3, 84, 72],
        [-65, -49, 63, -6, 79, 65],
        [-55, -40, 54, -13, 76, 57],
        [-45, -37, 44, -14, 73, 54],
        [-36, -32, 35, -16, 69, 51],
        [-29, -24, 28, -17, 66, 48],
        [-24, -20, 23, -18, 62, 45],
        [-20, -17, 19, -19, 59, 43],
        [-17, -15, 15, -20, 56, 40],
        [-14, -12, 13, -21, 54, 38],
        [-11, -10, 10, -21, 51, 36],
        [-9, -8, 8, -20, 48, 35],
        [-8, -8, 6, -21, 46, 33],
        [-7, -7, 5, -20, 44, 32],
        [-7, -7, 5, -19, 41, 30],
        [-6, -5, 4, -18, 39, 29],
        [-5, -5, 3, -17, 37, 28],
        [-4, -4, 3, -16, 35, 27],
        [-4, -3, 3, -16, 33, 26],
        [-3, -3, 3, -15, 32, 25],
        [-3, -3, 2, -15, 30, 24]]

l_action = [[33, -38, 68, 31, -57, -17],
        [39, -42, 76, 18, -44, -23],
        [47, -68, 61, 5, -30, -33],
        [52, -103, 48, -7, -16, -43],
        [60, -89, 52, -19, -10, -52],
        [85, -46, 26, -20, -12, -54],
        [105, -30, -1, -19, -11, -48],
        [121, -22, -12, -11, -10, -41],
        [130, -21, -18, 2, -13, -34],
        [133, -37, -35, 15, -22, -20],
        [134, -52, -46, 27, -30, -5],
        [128, -53, -20, 38, -35, 2],
        [127, -48, 5, 46, -36, 5],
        [123, -53, 28, 45, -33, 7],
        [119, -55, 47, 46, -30, 9],
        [115, -55, 61, 44, -27, 11],
        [111, -54, 68, 40, -23, 12],
        [108, -51, 71, 36, -18, 14],
        [101, -48, 72, 31, -12, 16],
        [91, -47, 75, 30, -5, 21],
        [78, -48, 78, 28, 1, 27],
        [61, -47, 81, 26, 7, 32],
        [43, -50, 83, 25, 14, 38],
        [23, -51, 85, 23, 19, 44],
        [6, -53, 88, 24, 25, 50],
        [-9, -56, 87, 20, 29, 54],
        [-19, -56, 85, 21, 33, 57],
        [-27, -55, 81, 16, 37, 59],
        [-32, -55, 78, 14, 40, 60],
        [-37, -54, 73, 12, 42, 61],
        [-36, -51, 64, 8, 43, 61],
        [-35, -48, 58, 6, 44, 59],
        [-41, -54, 63, -5, 45, 54],
        [-36, -47, 54, -2, 41, 51],
        [-31, -41, 44, -2, 40, 50],
        [-26, -36, 37, -2, 38, 49],
        [-21, -31, 29, -1, 35, 48],
        [-17, -27, 22, 0, 33, 47],
        [-15, -24, 19, 0, 31, 46],
        [-14, -20, 18, 1, 28, 45],
        [-13, -18, 17, 1, 26, 44],
        [-12, -16, 15, 2, 24, 43],
        [-11, -14, 14, 2, 23, 42],
        [-10, -13, 13, 3, 21, 41],
        [-9, -11, 12, 3, 20, 40],
        [-8, -10, 11, 3, 18, 39],
        [-8, -10, 11, 3, 17, 39],
        [-8, -9, 11, 3, 16, 38],
        [-8, -9, 11, 3, 15, 37],
        [-8, -8, 10, 4, 13, 37]]

r_action = [[-3, 6, -7, -17, 6, 21]
        [-16, -44, -68, -56, 28, -39]
        [-10, -35, -92, -66, 39, -41]
        [-5, -30, -99, -76, 50, -38]
        [1, -13, -98, -74, 58, -28]
        [12, -2, -100, -70, 62, -20]
        [38, 45, -25, -55, 69, -9]
        [41, 84, -10, -65, 78, -4]
        [53, 64, -13, -61, 77, -2]
        [71, 54, -22, -57, 72, -2]
        [81, 38, -34, -61, 69, -2]
        [89, 29, -46, -59, 64, -2]
        [97, 22, -55, -58, 60, -3]
        [97, 14, -57, -52, 55, -3]
        [96, 6, -56, -40, 48, -1]
        [92, -2, -57, -28, 38, 0]
        [87, -16, -61, -15, 26, 5]
        [80, -30, -70, -2, 13, 11]
        [75, -40, -73, 9, 4, 20]
        [64, -50, -62, 20, 1, 32]
        [50, -58, -52, 25, 0, 43]
        [35, -63, -40, 25, 0, 52]
        [22, -64, -32, 25, 1, 61]
        [12, -62, -26, 20, 4, 66]
        [2, -57, -21, 11, 7, 69]
        [-5, -56, -18, 3, 10, 71]
        [-10, -53, -16, 0, 10, 72]
        [-13, -49, -16, -3, 10, 71]
        [-13, -44, -14, -5, 10, 69]
        [-12, -37, -13, -8, 10, 64]
        [-10, -28, -11, -11, 11, 60]
        [-10, -22, -10, -13, 11, 56]
        [-9, -17, -9, -13, 10, 54]
        [-7, -11, -9, -12, 9, 51]
        [-6, -6, -9, -13, 9, 48]
        [-6, -2, -8, -12, 9, 46]
        [-5, 1, -7, -12, 8, 43]
        [-4, 3, -6, -12, 8, 41]
        [-4, 5, -6, -12, 7, 39]
        [-3, 7, -6, -12, 7, 37]
        [-3, 8, -5, -12, 7, 35]
        [-3, 8, -5, -12, 6, 34]
        [-3, 9, -5, -12, 6, 32]
        [-3, 9, -5, -13, 6, 31]
        [-3, 9, -5, -13, 6, 29]
        [-3, 9, -5, -13, 5, 27]
        [-3, 9, -5, -13, 5, 26]
        [-3, 9, -5, -13, 5, 25]
        [-3, 9, -5, -14, 4, 24]
        [-3, 9, -5, -13, 4, 23]
        [-2, 10, -5, -13, 4, 22]]

s_action = [[-13, -52, -66, 37, 24, -11],
        [-14, -59, -76, 43, 32, -18],
        [-14, -64, -82, 47, 41, -25],
        [-8, -65, -80, 50, 51, -33],
        [0, -64, -67, 52, 61, -37],
        [10, -62, -48, 56, 67, -39],
        [23, -65, -30, 59, 69, -40],
        [36, -72, -16, 63, 67, -41],
        [49, -79, -7, 68, 61, -44],
        [64, -85, -5, 72, 52, -49],
        [83, -86, -10, 74, 44, -56],
        [107, -82, -21, 73, 38, -65],
        [133, -67, -32, 66, 40, -73],
        [151, -44, -31, 57, 48, -81],
        [162, -18, -6, 56, 56, -81],
        [169, 5, 27, 56, 60, -74],
        [169, 6, 66, 55, 62, -61],
        [167, -6, 97, 54, 57, -52],
        [169, -11, 110, 50, 49, -48],
        [173, -14, 115, 45, 41, -46],
        [179, -7, 115, 40, 30, -45],
        [184, 2, 106, 33, 19, -41],
        [189, 9, 91, 26, 9, -35],
        [190, 15, 68, 18, 1, -26],
        [183, 10, 48, 13, -6, -14],
        [174, 0, 25, 8, -14, -4],
        [163, -13, 9, 5, -20, 7],
        [145, -31, -2, 2, -27, 18],
        [127, -43, -10, 7, -35, 30],
        [106, -52, -19, 6, -44, 40],
        [85, -63, -27, 7, -51, 48],
        [66, -66, -34, 3, -57, 56],
        [47, -70, -41, 1, -64, 64],
        [30, -71, -48, 0, -67, 72],
        [16, -70, -46, -4, -68, 77],
        [3, -68, -42, -8, -71, 81],
        [-3, -63, -42, -11, -73, 83],
        [-7, -58, -41, -16, -73, 83],
        [-8, -55, -40, -21, -70, 81],
        [-8, -52, -37, -25, -66, 78],
        [-6, -47, -34, -29, -62, 73],
        [-4, -40, -30, -31, -57, 68],
        [-3, -33, -26, -33, -53, 65],
        [-3, -28, -21, -34, -48, 62],
        [-2, -24, -18, -34, -44, 59],
        [-3, -22, -13, -35, -41, 57],
        [-6, -18, -5, -36, -38, 53],
        [-6, -14, -3, -34, -37, 51],
        [-4, -12, -5, -32, -36, 49],
        [-3, -10, -5, -30, -33, 47]]

# Handle the preprocessing and passing of data into the FPGA
def main():
    
    # Program the FPGA with the bitstream
    ol = Overlay('design_1_wrapper.bit')
    dma = ol.axi_dma_0

    for i in range(4):
        x = []
        y = []
        z = []
        gx = []
        gy = []
        gz = []
        if i == 0:
            for j in range(50):
                x.append(g_action[j][0])
                y.append(g_action[j][1])
                z.append(g_action[j][2])
                gx.append(g_action[j][3])
                gy.append(g_action[j][4])
                gz.append(g_action[j][5])
        elif i == 1:
            for j in range(50):
                x.append(s_action[j][0])
                y.append(s_action[j][1])
                z.append(s_action[j][2])
                gx.append(s_action[j][3])
                gy.append(s_action[j][4])
                gz.append(s_action[j][5])
        elif i == 2:
            for j in range(50):
                x.append(r_action[j][0])
                y.append(r_action[j][1])
                z.append(r_action[j][2])
                gx.append(r_action[j][3])
                gy.append(r_action[j][4])
                gz.append(r_action[j][5])
        elif i == 3:
            for j in range(50):
                x.append(l_action[j][0])
                y.append(l_action[j][1])
                z.append(l_action[j][2])
                gx.append(l_action[j][3])
                gy.append(l_action[j][4])
                gz.append(l_action[j][5])

        x_mean = np.mean(x)
        y_mean = np.mean(y)
        z_mean = np.mean(z)
        gx_mean = np.mean(gx)
        gy_mean = np.mean(gy)
        gz_mean = np.mean(gz)
        x_max = np.amax(x)
        y_max = np.amax(y)
        z_max = np.amax(z)
        gx_max = np.amax(gx)
        gy_max = np.amax(gy)
        gz_max = np.amax(gz)
        x_min = np.amin(x)
        y_min = np.amin(y)
        z_min = np.amin(z)
        gx_min = np.amin(gx)
        gy_min = np.amin(gy)
        gz_min = np.amin(gz)

        final = []

        for item in x:
            final.append(item)
        for item in y:
            final.append(item)
        for item in z:
            final.append(item)
        for item in gx:
            final.append(item)
        for item in gy:
            final.append(item)
        for item in gz:
            final.append(item)

        final.append(int(x_mean))
        final.append(int(y_mean))
        final.append(int(z_mean))
        final.append(int(gx_mean))
        final.append(int(gy_mean))
        final.append(int(gz_mean))
        final.append(int(x_max))
        final.append(int(y_max))
        final.append(int(z_max))
        final.append(int(gx_max))
        final.append(int(gy_max))
        final.append(int(gz_max))
        final.append(int(x_min))
        final.append(int(y_min))
        final.append(int(z_min))
        final.append(int(gx_min))
        final.append(int(gy_min))
        final.append(int(gz_min))

        input_buffer = allocate(shape=(318,), dtype=np.intc)
        output_buffer = allocate(shape=(1,), dtype=np.intc)

        for i in range(318):
            input_buffer[i] = final[i]

        dma.sendchannel.transfer(input_buffer)
        dma.recvchannel.transfer(output_buffer)
        dma.sendchannel.wait()
        dma.recvchannel.wait()

        if output_buffer[0] == 1:
            action = "grenade"
        elif output_buffer[0] == 2:
            action = "shield"
        elif output_buffer[0] == 3:
            action = "reload"
        elif output_buffer[0] == 4:
            action = "logout"

        print(f"REAL AI: {action}")

if __name__ == "__main__":
    main()